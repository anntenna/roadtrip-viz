var Promise = require('es6-promise').Promise,
    googlemaps = require('googlemaps'),
    polyline = require('polyline'),
    geojson = require('geojson'),
    fs = require('fs'),
    util = require('util');

/*var output = "", // name of the output file
    start = "",
    end = "",
    // waypoints is a string with values separated by |
    waypoints = "";
*/
var apiKey = "AIzaSyBCE15k_WWAgz-Ui1HHQSKQ1uGxmql0Dl4";

/*fs.readFile('config-gmaps', function(err, data){
  if (err) {
    console.error(err);
  }
  return data;
});*/



googlemaps.config({'key': apiKey});

function getGoogleRouteInformation(origin, destination, waypoints, name) {
  return new Promise(function(resolve, reject){

    if (!origin || !destination) {
      console.error('Origin and destination required!')
    }

    function handleResponse(err, data) {
      if (data.status == "OK") {
        resolve(data);
      } else {
        reject('There was a problem getting the data from Google for trip ' + name + " " + data.status);
      }
    };

    googlemaps.directions(origin, destination, handleResponse, false, false, waypoints);
    });
}

function handleError(err) {
  console.error(err);
};

exports.getRoute = function(start, end, waypoints, output, name) {

    getGoogleRouteInformation(start, end, waypoints, name)
    // Decode the polyline info from Google
    .then(function(data){
      var encodedPolyline = data.routes[0].overview_polyline,
          decodedPolyline;

      decodedPolyline = polyline.decode(encodedPolyline.points);

      return decodedPolyline;

    }, handleError)
    // Convert the array of arrays into an array of objects
    .then(function(points){

      var normalized = [];
      if(points) {
        points.forEach(function(rawPoints){

          var value = {
            'lat': rawPoints[0],
            'lng': rawPoints[1]
          };

          return normalized.push(value);

        });
      }
      return normalized;

    }, handleError)
    // Encode the array into proper geoJSON
    .then(function(normalizedPoints){

      var geoData;
      
      if(normalizedPoints.length > 0) {
        geoData = geojson.parse(normalizedPoints, {Point: ['lat', 'lng']}); 
      }

      return geoData;

    }, handleError)
    // Write out the file
    .then(function(geoData){

      if(geoData) {

        fs.writeFile('geojson/' + output + '.geojson', JSON.stringify(geoData, null, 2));

        console.log('Successfully created file ' + output)
      }
    }, handleError)
    .catch(handleError);
}
